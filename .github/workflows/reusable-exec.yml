name: Website Deployment
on:
  push:
    branches:
      - master
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          # path: ~/.npm  #Here are saving the cacke in .npm folder. Instead we can store the node_module in cache
          path: node_modules
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != true #The cache-hit returns true if the ids (the cache ids) are matching which means the requirements are already present
        run: npm ci
      - name: Lint code
        run: npm run lint
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          # path: ~/.npm  #Here are saving the cacke in .npm folder. Instead we can store the node_module in cache
          path: node_modules
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != true #The cache-hit returns true if the ids (the cache ids) are matching which means the requirements are already present
        run: npm ci
      - name: Test code
        id: run-test
        run: npm run test
      - name: Upload test report
        if: failure() && steps.run-test.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: test.json
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          # path: ~/.npm  #Here are saving the cacke in .npm folder. Instead we can store the node_module in cache
          path: node_modules
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != true #The cache-hit returns true if the ids (the cache ids) are matching which means the requirements are already present
        run: npm ci
      - name: Build website
        id: build-website
        run: npm run build
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist
  deploy:
    needs: build
    uses:
      ./.github/workflows/deploy.yml
      # uses: D:/Github Actions/Controlling Execution Flow/.github/workflows/deploy.yml
    with:
      artifact-name: dist-files

  report:
    needs: [lint, deploy]
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Output Information
        run: |
          echo "Something went wrong, Generating report"
          echo "${{toJson( github)}}"

  print-deploy-output:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Print the output
        run: echo "${{needs.deploy.outputs.result}}"
